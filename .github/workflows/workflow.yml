name: Publish distribution PyPI and TestPyPI

on:
  push:
    branches: [ master ]

permissions: read-all

env:
  APP_PACKAGE_NAME: ${{ github.event.repository.name }}

jobs:

  pre:
    runs-on: ubuntu-latest
    steps:
      - run: echo ""
    outputs:
      APP_PACKAGE_PREFIX: $( echo "${{ env.APP_PACKAGE_NAME }}" | tr '-' '_' )



  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: >-
          python3 -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/


  #---------------------------------------------------------------------------#
  # Tests

  localTest:
    name: Test locally
    needs:
      - pre
      - build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Install distribution from the local package
        run: |
          pip install $(find ./dist -type f -name '*.whl')
          pip list | grep "${{ needs.pre.outputs.APP_PACKAGE_PREFIX }}"
      - name: Run test script
        run: |
          python3 tests/main.py | grep "Hello from"
  


  publishTestpypiCheck:
    name: Prep to publish to TestPyPI
    needs:
      - pre
      - localTest
    runs-on: ubuntu-latest
    env:
      APP_PACKAGE_PREFIX: ${{ needs.pre.outputs.APP_PACKAGE_PREFIX }}

    steps:
      - uses: actions/checkout@v4
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - id: version_check
        uses: ./.github/actions/publish-pypi-version-check
        with:
          is-test-pypi-repo: 'true'
      - name: Output results
        shell: bash
        run: |
          echo "myexists=${{ steps.version_check.outputs.exists }}"
          echo "myexists=${{ steps.version_check.outputs.exists }}" >> $GITHUB_ENV



  publishTestpypiCheckDebug:
    name: Prep to publish to TestPyPI DEBUG
    needs:
      - publishTestpypiCheck
    runs-on: ubuntu-latest

    steps:
      - name: Debug
        shell: bash
        run: |
          echo "needs.publishTestpypiCheck.outputs.exists: ${{ needs.publishTestpypiCheck.outputs.exists }}"
          echo "needs.publishTestpypiCheck.outputs.myexists: ${{ needs.publishTestpypiCheck.outputs.myexists }}"



  publishTestpypi:
    name: Publish to TestPyPI

    needs:
      - publishTestpypiCheck
    if: needs.publishTestpypiCheck.outputs.exists == 'aaaa'
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/${{ env.APP_PACKAGE_NAME }}

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  #---------------------------------------------------------------------------#



  publishPypiCheck:
    name: Prep to publish to PyPI

    needs:
      - pre
      - localTest
    if: startsWith(github.ref, 'refs/tags/v')  # only publish to PyPI on tag pushes
    runs-on: ubuntu-latest
    env:
      APP_PACKAGE_PREFIX: ${{ needs.pre.outputs.APP_PACKAGE_PREFIX }}

    steps:
      - uses: actions/checkout@v4
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Check repo versions
        uses: ./.github/actions/publish-pypi-version-check



  publishPypi:
    name: Publish to PyPI

    needs:
      - publishPypiCheck
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/${{ github.event.repository.name }}

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1



  github-release:
    name: Upload to GitHub Release

    needs:
      - publishPypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          "$GITHUB_REF_NAME"
          --repo "$GITHUB_REPOSITORY"
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          "$GITHUB_REF_NAME" dist/**
          --repo "$GITHUB_REPOSITORY"
