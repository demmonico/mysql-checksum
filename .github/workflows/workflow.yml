name: Publish distribution

on:
  push:
    branches: [ master ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions: read-all

env:
  APP_PACKAGE_NAME: ${{ github.event.repository.name }}
  REPO_URL: https://pypi.org
  TEST_REPO_URL: https://test.pypi.org

jobs:

  envPrep:
    name: Prepare environment
    runs-on: ubuntu-latest
    steps:
      - run: echo ""
    outputs:
      APP_PACKAGE_PREFIX: $( echo "${{ env.APP_PACKAGE_NAME }}" | tr '-' '_' )


  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: >-
          python3 -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/


  #---------------------------------------------------------------------------#
  # Tests

  localTest:
    name: Test locally
    needs:
      - envPrep
      - build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Install distribution from the local package
        run: |
          pip install $(find ./dist -type f -name '*.whl')
          pip list | grep "${{ needs.envPrep.outputs.APP_PACKAGE_PREFIX }}"
      - name: Run test script
        run: |
          python3 tests/main.py | grep "Hello from"
  

  versionCheck_TestPypi:
    name: Version check at TestPyPI
    needs:
      - envPrep
      - localTest
    runs-on: ubuntu-latest
    env:
      APP_PACKAGE_PREFIX: ${{ needs.envPrep.outputs.APP_PACKAGE_PREFIX }}

    steps:
      - uses: actions/checkout@v4
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Version check
        id: check
        uses: ./.github/actions/publish-pypi-version-check
        with:
          repository-url: ${{ env.TEST_REPO_URL }}/simple

    outputs:
      exists: ${{ steps.check.outputs.exists }}


  publish_TestPypi:
    name: Publish to TestPyPI
    needs:
      - envPrep
      - versionCheck_TestPypi
    if: needs.versionCheck_TestPypi.outputs.exists == 'false'
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: ${{ env.TEST_REPO_URL }}/p/${{ env.APP_PACKAGE_NAME }}

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ env.TEST_REPO_URL }}/legacy/
          verbose: true


  integrationTest_TestPypi:
    name: Integration test from TestPyPI
    needs:
      - envPrep
      - publish_TestPypi
    runs-on: ubuntu-latest

    steps:
      - name: Install distribution from repo
        run: |
          pip install -i ${{ env.TEST_REPO_URL }}/simple ${{ env.APP_PACKAGE_NAME }}
          pip list | grep "${{ needs.envPrep.outputs.APP_PACKAGE_PREFIX }}"

      - uses: actions/checkout@v4
      - name: Run test script
        run: |
          python3 tests/main.py | grep "Hello from"


  #---------------------------------------------------------------------------#
  # Publish

  versionCheck_Pypi:
    name: Version check at PyPI
    needs:
      - envPrep
      - localTest
    if: startsWith(github.ref, 'refs/tags/v')  # only publish to PyPI on tag pushes
    runs-on: ubuntu-latest
    env:
      APP_PACKAGE_PREFIX: ${{ needs.envPrep.outputs.APP_PACKAGE_PREFIX }}

    steps:
      - uses: actions/checkout@v4
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Version check
        id: check
        uses: ./.github/actions/publish-pypi-version-check
        with:
          repository-url: ${{ env.REPO_URL }}/simple

    outputs:
      exists: ${{ steps.check.outputs.exists }}
  
  
  publish_Pypi:
    name: Publish to PyPI
    needs:
      - envPrep
      - versionCheck_Pypi
    if: needs.versionCheck_Pypi.outputs.exists == 'false'
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: ${{ env.REPO_URL }}/p/${{ env.APP_PACKAGE_NAME }}

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1


  integrationTest_Pypi:
    name: Integration test from PyPI
    needs:
      - envPrep
      - publish_Pypi
    runs-on: ubuntu-latest

    steps:
      - name: Install distribution from repo
        run: |
          pip install -i ${{ env.REPO_URL }}/simple ${{ env.APP_PACKAGE_NAME }}
          pip list | grep "${{ needs.envPrep.outputs.APP_PACKAGE_PREFIX }}"

      - uses: actions/checkout@v4
      - name: Run test script
        run: |
          python3 tests/main.py | grep "Hello from"


  #---------------------------------------------------------------------------#
  # Release

  github-release:
    name: Upload to GitHub Release

    needs:
      - integrationTest_Pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          "$GITHUB_REF_NAME"
          --repo "$GITHUB_REPOSITORY"
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          "$GITHUB_REF_NAME" dist/**
          --repo "$GITHUB_REPOSITORY"
